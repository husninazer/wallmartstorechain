pragma solidity ^0.4.24;
// Define a contract 'Supplychain'

import '../itemaccesscontrol/FarmerRole.sol';
import '../itemaccesscontrol/ProcessorRole.sol';
import '../itemaccesscontrol/DistributorRole.sol';
import '../itemaccesscontrol/WallmartStoreRole.sol';
import '../itemaccesscontrol/ConsumerRole.sol';

import '../itemcore/Ownable.sol';


contract SupplyChain is FarmerRole, ProcessorRole, DistributorRole, WallmartStoreRole, ConsumerRole, Ownable {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  // Define enum 'State' with the following values:
  enum State
  {
    Harvested,  // 0
    Tagged,     // 1
    Packed,     // 2
    Processed,  // 3
    Shipped,    // 4
    Bought,     // 5
    Received,   // 6
    Sold       // 7
    }

  State constant defaultState = State.Harvested;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address originFarmerID; // Metamask-Ethereum address of the Farmer
    string  originFarmName; // Farmer Name
    string  originFarmInformation;  // Farmer Information
    string  originFarmLatitude; // Farm Latitude
    string  originFarmLongitude;  // Farm Longitude
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address distributorID;  // Metamask-Ethereum address of the Distributor
    address storeID; // Metamask-Ethereum address of the Retailer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Harvested(uint upc);
  event Tagged(uint upc);
  event Packed(uint upc);
  event Processed(uint upc);
  event Shipped(uint upc);
  event Bought(uint upc);
  event Received(uint upc);
  event Sold(uint upc);



  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier harvested(uint _upc) {
    require(items[_upc].itemState == State.Harvested);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Tagged
  modifier tagged(uint _upc) {
    require(items[_upc].itemState == State.Tagged);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Packed
  modifier packed(uint _upc) {
      require(items[_upc].itemState == State.Packed);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Processed
  modifier processed(uint _upc) {
      require(items[_upc].itemState == State.Processed);
    _;
  }


  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Bought
  modifier bought(uint _upc) {
    require(items[_upc].itemState == State.Bought);
    _;
  }


  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier purchased(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }


  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function harvestItem(uint _upc, address _originFarmerID, string _originFarmName, string _originFarmInformation, string  _originFarmLatitude, string  _originFarmLongitude, string  _productNotes) public
  {
    // Add the new item as part of Harvest
    items[_upc] = Item({
      sku: 1,
      upc: _upc,
      ownerID: owner,
      originFarmerID: _originFarmerID,
      originFarmName: _originFarmName,
      originFarmInformation: _originFarmInformation,
      originFarmLatitude: _originFarmLatitude,
      originFarmLongitude: _originFarmLongitude,
      productID: 0,
      productNotes: _productNotes,
      productPrice: 0,
      itemState: State.Harvested,
      distributorID: 0,
      storeID: 0,
      consumerID: 0
    });
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event

  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function tagItem(uint _upc) verifyCaller(owner) harvested(sku) onlyFarmer public
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {

    // Update the appropriate fields
    items[_upc].itemState = State.Tagged;

    // Emit the appropriate event
    emit Tagged(_upc);

  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Packed'
  function packItem(uint _upc) tagged(upc) onlyFarmer public
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    items[_upc].itemState = State.Packed;

    // Emit the appropriate event
    emit Packed(_upc);

  }

  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function processItem(uint _upc) packed(upc) onlyProcessor public
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    items[_upc].itemState = State.Processed;

    // Emit the appropriate event
    emit Processed(_upc);

  }



  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function shipItem(uint _upc) processed(upc) onlyProcessor public
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    items[_upc].itemState = State.Shipped;

    // Emit the appropriate event
    emit Shipped(_upc);

  }


  // Define a function 'processtItem' that allows a farmer to mark an item 'Processed'
  function buyItem(uint _upc, uint _price) shipped(upc) onlyDistributor payable
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifier to verify caller of this function

  {
    // Update the appropriate fields
    items[_upc].itemState = State.Bought;

    // Transfer money to farmer
    items[_upc].originFarmerID.transfer(items[_upc].productPrice);

    // Emit the appropriate event
    emit Bought(_upc);

  }

  // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _upc) bought(upc) onlyWallmartStore public
    // Call modifier to check if upc has passed previous supply chain stage

    // Access Control List enforced by calling Smart Contract / DApp
  {
    // Update the appropriate fields
    items[_upc].itemState = State.Received;

    // Emit the appropriate event
    emit Received(_upc);

  }



  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellItem(uint _upc) received(upc)  onlyConsumer
  // Call modifier to check if upc has passed previous supply chain stage

  // Call modifer to check if buyer has paid enough

  // Call modifer to send any excess ether back to buyer

  {
    // Update the appropriate fields
    items[_upc].itemState = State.Sold;

    // Update the appropriate fields - ownerID, distributorID, itemState

    // emit the appropriate event
    emit Sold(_upc);

  }



  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  address ownerID,
  address originFarmerID,
  string  originFarmName,
  string  originFarmInformation
  )
  {
  // Assign values to the 8 parameters


  return
  (
  items[_upc].sku,
  items[_upc].upc,
  items[_upc].ownerID,
  items[_upc].originFarmerID,
  items[_upc].originFarmName,
  items[_upc].originFarmInformation
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  string  productNotes,
  uint    productPrice,
  State    itemState
  )
  {
    // Assign values to the 9 parameters

  return
  (
  items[_upc].sku,
  items[_upc].upc,
  items[_upc].productID,
  items[_upc].productNotes,
  items[_upc].productPrice,
  items[_upc].itemState
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferThree(uint _upc) public view returns
  (
  uint    itemSKU,
  uint    itemUPC,
  uint    productID,
  address distributorID,
  address storeID,
  address consumerID
  )
  {
    // Assign values to the 9 parameters

  return
  (
  items[_upc].sku,
  items[_upc].upc,
  items[_upc].productID,
  items[_upc].distributorID,
  items[_upc].storeID,
  items[upc].consumerID
  );
  }
}
